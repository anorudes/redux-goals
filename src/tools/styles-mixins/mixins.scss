
@mixin transition-e($delay) {
  transition: all $delay ease;
  -o-transition: all $delay ease;
  -ms-transition: all $delay ease;
  -moz-transition: all $delay ease;
  -webkit-transition: all $delay ease;
}

@mixin transition($delay) {
  transition: all $delay linear;
  -o-transition: all $delay linear;
  -ms-transition: all $delay linear;
  -moz-transition: all $delay linear;
  -webkit-transition: all $delay linear;
}

@mixin brightness($a) {
    -webkit-backface-visibility:hidden;
    -webkit-transform:translateZ(o);
      &:hover {
      -webkit-filter: brightness($a);
      -moz-filter: brightness($a);
      -ms-filter: brightness($a);
      filter: brightness($a);
      }
}

@mixin clear() {
  &:before,
  &:after {
    content: " ";
    display: table;
  }
  
  &:after {
    clear: both;
  }
}


@mixin h-center {
  left: 50%;
  -webkit-transform: translateX(-50%);
  -moz-transform: translateX(-50%);
  transform: translateX(-50%);
}

@mixin v-center {
  top: 50%;
  -webkit-transform: translateY(-50%);
  -moz-transform: translateY(-50%);
  transform: translateY(-50%);
}

@mixin table {
  display: table;
  height: 100%;
  width: 100%;
  > div {
    display: table-cell;
    vertical-align: top;
    height: 100%;
  }
}

@mixin ul {
  list-style: none;
  padding: 0;
  margin: 0;
}

@mixin flex-center
{
    display: flex;
    align-items: center;
    justify-content: center;
}

@mixin size($width, $height: $width) {
    width: $width;
    height: $height;
}

// ***************************************************************************
// rem
// ***************************************************************************

$rem-baseline: 16px !default;
$rem-fallback: true !default;
$rem-px-only: false !default;


@function rem-separator($list) {
  @if function-exists("list-separator") == true {
    @return list-separator($list);
  }

  $test-list: ();
  @each $item in $list {
    $test-list: append($test-list, $item, space);
  }

  @return if($test-list == $list, space, comma);
}

@mixin rem-baseline($zoom: 100%) {
  font-size: $zoom / 16px * $rem-baseline;
}

@function em-convert($to, $values...) {
  $result: ();
  $separator: rem-separator($values);

  @each $value in $values {
    @if type-of($value) == "number" and unit($value) == "em" and $to == "px" {
      $result: append($result, $value / 1em * $rem-baseline, $separator);
    } @else if type-of($value) == "number" and unit($value) == "px" and $to == "em" {
      $result: append($result, $value / ($rem-baseline / 1em), $separator);
    } @else if type-of($value) == "list" {
      $result: append($result, em-convert($to, $value...), $separator);
    } @else {
      $result: append($result, $value, $separator);
    }
  }

  @return $result;
}

@function rem-convert($to, $values...) {
  $result: ();
  $separator: rem-separator($values);

  @each $value in $values {
    @if type-of($value) == "number" and unit($value) == "rem" and $to == "px" {
      $result: append($result, $value / 1rem * $rem-baseline, $separator);
    } @else if type-of($value) == "number" and unit($value) == "px" and $to == "rem" {
      $result: append($result, $value / ($rem-baseline / 1rem), $separator);
    } @else if type-of($value) == "list" {
      $result: append($result, rem-convert($to, $value...), $separator);
    } @else {
      $result: append($result, $value, $separator);
    }
  }

  @return $result;
}

@function rem($values...) {
  @if $rem-px-only {
    @return rem-convert(px, $values...);
  } @else {
    @return rem-convert(rem, $values...);
  }
}


@function em($values...) {
  @return em-convert(em, $values...);
}

@mixin rem($properties, $values...) {
  @if type-of($properties) == "map" {
    @each $property in map-keys($properties) {
      @include rem($property, map-get($properties, $property));
    }
  } @else {
    @each $property in $properties {
      @if $rem-fallback or $rem-px-only {
        #{$property}: rem-convert(px, $values...);
      }
      @if not $rem-px-only {
        #{$property}: rem-convert(rem, $values...);
      }
    }
  }
}

// ***************************************************************************
// Bootstrap grid
// ***************************************************************************

$grid-gutter-lg: 20px;
$grid-gutter-md: 20px;
$grid-gutter-sm: 20px;
$grid-gutter-xs: 20px;

@mixin span($px) {
  @include make-col-span($px);
}

@mixin grid-gutters($g-lg, $g-md: $g-lg, $g-sm: $g-md, $g-xs: $g-sm) {
  $grid-gutter-lg: $g-lg !global;
  $grid-gutter-md: $g-md !global;
  $grid-gutter-sm: $g-sm !global;
  $grid-gutter-xs: $g-xs !global;
}

@mixin grid($col-lg, $col-md: $col-lg, $col-sm: $col-md, $col-xs: $col-sm) {
  @include clear();
  >div, >.col {
    position: relative;
  }
  @include breakpoint($lg-full) {
    @include make-row($grid-gutter-lg);
    >div, >.col {
      @include make-col($grid-gutter-lg);
      @include make-col-span($col-lg);
      $col: 12 / $col-lg;
      &:nth-child(#{$col}n+1) {
        clear: left;
      }
    }
  }
  @include breakpoint($md-full) {
    @include make-row($grid-gutter-md);
    >div, >.col {
      @include make-col($grid-gutter-md);
      @include make-col-span($col-md);
      $col: 12 / $col-md;
      &:nth-child(#{$col}n+1) {
        clear: left;
      }
    }
  }
  @include breakpoint($sm-full) {
    @include make-row($grid-gutter-sm);
    >div, >.col {
      @include make-col($grid-gutter-sm);
      @include make-col-span($col-sm);
      $col: 12 / $col-sm;
      &:nth-child(#{$col}n+1) {
        clear: left;
      }
    }
  }
  @include breakpoint($xs-full) {
    @include make-row($grid-gutter-xs);
    >div, >.col {
      @include make-col($grid-gutter-xs);
      @include make-col-span($col-xs);
      $col: 12 / $col-xs;
      &:nth-child(#{$col}n+1) {
        clear: left;
      }
    }
  }
}

@mixin row() {
  @include clear();
  @include breakpoint($lg-full) {
    @include make-row($grid-gutter-lg);
  }
  @include breakpoint($md-full) {
    @include make-row($grid-gutter-md);
  }
  @include breakpoint($sm-full) {
    @include make-row($grid-gutter-sm);
  }
  @include breakpoint($xs-full) {
    @include make-row($grid-gutter-xs);
  }
}

@mixin with-gutters($g-lg, $g-md: $g-lg, $g-sm: $g-md, $g-xs: $g-sm) {
  $grid-gutter-lg-old: $grid-gutter-lg;
  $grid-gutter-md-old: $grid-gutter-md;
  $grid-gutter-sm-old: $grid-gutter-sm;
  $grid-gutter-xs-old: $grid-gutter-xs;
  $grid-gutter-lg: $g-lg !global;
  $grid-gutter-md: $g-md !global;
  $grid-gutter-sm: $g-sm !global;
  $grid-gutter-xs: $g-xs !global;
  @content;
  $grid-gutter-lg: $grid-gutter-lg-old !global;
  $grid-gutter-md: $grid-gutter-lg-old !global;
  $grid-gutter-sm: $grid-gutter-lg-old !global;
  $grid-gutter-xs: $grid-gutter-lg-old !global;
}

@mixin col($col-lg, $col-md: $col-lg, $col-sm: $col-md, $col-xs: $col-sm) {
  position: relative;
  @include breakpoint($lg-full) {
    @include make-col($grid-gutter-lg);
    @include make-col-span($col-lg);
  }
  @include breakpoint($md-full) {
    @include make-col($grid-gutter-md);
    @include make-col-span($col-md);
  }
  @include breakpoint($sm-full) {
    @include make-col($grid-gutter-sm);
    @include make-col-span($col-sm);
  }
  @include breakpoint($xs-full) {
    @include make-col($grid-gutter-xs);
    @include make-col-span($col-xs);
  }
}

@mixin col-span($n) {
  @include make-col-span($n);
}

@mixin col-offset($size, $columns: $grid-columns) {
  margin-left: percentage($size / $columns);
}

@mixin col-push($size, $columns: $grid-columns) {
  left: if($size > 0, percentage($size / $columns), auto);
}

@mixin col-pull($size, $columns: $grid-columns) {
  right: if($size > 0, percentage($size / $columns), auto);
}

@mixin hover($class: 'active') {
    .no-touch &:hover, &.#{$class} {
        @content;
    }
}

@mixin ghostVA(){
  &:before {
    content: '';
    display: inline-block;
    vertical-align: middle;
    height: 100%; width: .1px;
  }
}